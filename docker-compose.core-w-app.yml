# This compose file is useful for testing https.
# The .env file sets ENVVARS for the Docker CLI used by this compose file.
---
version: "3.8"
services:
  cms:
    image: ${CMS_IMAGE}:${CMS_TAG}
    volumes:
      - ./conf/cms/settings_custom.py:/code/taccsite_cms/settings_custom.py
      - ./conf/cms/secrets.py:/code/taccsite_cms/secrets.py
      - ./conf/cms/settings_local.py:/code/taccsite_cms/settings_local.py
      - ./conf/cms/uwsgi/uwsgi.ini:/code/uwsgi.ini
      - /var/www/portal/cms/static:/code/static
      - /var/www/portal/cms/media:/code/media
    # command: python manage.py runserver 0.0.0.0:8000
    command: ["uwsgi", "--ini", "uwsgi.ini"]
    container_name: core_portal_cms
    depends_on:
      - postgrescms
    networks:
      - sciviscolor_net

  redis:
    image: redis:5.0
    volumes:
      - core_portal_redis_data:/data
    container_name: core_portal_redis
    networks:
      - sciviscolor_net

  rabbitmq:
    image: rabbitmq:3.7.17-management
    volumes:
      - core_portal_rabbitmq_data:/var/lib/rabbitmq/mnesia/rabbit@core_portal_rabbitmq
    env_file: ./conf/env_files/rabbitmq.env
    container_name: core_portal_rabbitmq
    networks:
      - sciviscolor_net

  memcached:
    image: memcached:latest
    container_name: core_portal_memcached
    networks:
      - sciviscolor_net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    ulimits:
      memlock: -1
    environment:
      - ES_HEAP_SIZE:1g
      - discovery.type=single-node
    volumes:
      - ./conf/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - core_portal_es_data:/usr/share/elasticsearch/data
    container_name: core_portal_elasticsearch
    ports:
      - 9200:9200
      networks:
      - sciviscolor_net

  postgres:
    image: postgres:11.5
    volumes:
      - core_portal_postgres_data:/var/lib/postgresql/data/portal
    container_name: core_portal_postgres
    environment:
      - POSTGRES_PASSWORD=dev
      - POSTGRES_USER=dev
      - POSTGRES_DB=dev
      - PGDATA=/var/lib/postgresql/data/portal
    networks:
      - sciviscolor_net

  postgrescms:
    image: postgres:11.5
    volumes:
      - core_cms_postgres_data:/var/lib/postgresql/data/portal
    container_name: core_cms_postgres
    environment:
      - POSTGRES_PASSWORD=taccforever
      - POSTGRES_USER=postgresadmin
      - POSTGRES_DB=taccsite
      - PGDATA=/var/lib/postgresql/data/portal
    networks:
      - sciviscolor_net

  nginx:
    image: nginx
    volumes:
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./conf/uwsgi/uwsgi_params:/etc/nginx/uwsgi_params
      - ./conf/nginx/gzip.conf:/etc/nginx/gzip.conf
      - ./conf/nginx/certificates/cep.test.crt:/etc/ssl/cep.test.crt
      - ./conf/nginx/certificates/cep.test.key:/etc/ssl/cep.test.key
      - ./conf/nginx/dhparam.pem:/etc/ssl/dhparam.pem
      - /var/www/portal/cms/static:/var/www/portal/cms/static
      - /var/www/portal/cms/media:/var/www/portal/cms/media
      - /var/www/portal/portal/media:/var/www/portal/portal/media
      - /var/www/portal/portal/static:/var/www/portal/portal/static
      - ./conf/nginx/colormoves.location.conf:/etc/nginx/conf.d/colormoves.location.conf
      - ./conf/nginx/assets.location.conf:/etc/nginx/conf.d/assets.location.conf
      # - colormoves_app_distribution:/colormoves-app-distribution
      # - ./protx-client:/var/www/portal/protx-client
    ports:
      - 80:80
      - 443:443
    container_name: core_portal_nginx
    depends_on:
      - cms
      - core
    networks:
      - sciviscolor_net

  websockets:
    image: ${PORTAL_IMAGE}:${PORTAL_TAG}
    volumes:
      - ./conf/nginx/certificates/cep.test.crt:/etc/ssl/cep.test.crt
      - ./conf/nginx/certificates/cep.test.key:/etc/ssl/cep.test.key
      # FROM PROTX.
      - ./conf/portal/settings_secret.py:/srv/www/portal/server/portal/settings/settings_secret.py
      - ./conf/portal/settings_custom.py:/srv/www/portal/server/portal/settings/settings_custom.py
    container_name: core_portal_websockets
    # ** NOTE: Run this daphne command below to run a production-ready daphne server,
    # ** matching deployed configurations. Be aware there is no autoreload for local
    # ** development with this enabled.
    # command: 'daphne -b 0.0.0.0 -p 9000 -e ssl:443:privateKey=/etc/ssl/cep.test.key:certKey=/etc/ssl/cep.test.crt --root-path=/srv/www/portal/server --access-log - --proxy-headers portal.asgi:application'
    command: 'python manage.py runserver 0.0.0.0:9000'
    networks:
      - sciviscolor_net

  core:
    image: ${PORTAL_IMAGE}:${PORTAL_TAG}
    volumes:
      - /var/www/portal/portal/media:/srv/www/portal/server/media
      - /var/www/portal/portal/static:/srv/www/portal/server/static
      # FROM PROTX.
      - ./conf/portal/settings_secret.py:/srv/www/portal/server/portal/settings/settings_secret.py
      - ./conf/portal/settings_custom.py:/srv/www/portal/server/portal/settings/settings_custom.py
    dns:
      - 8.8.8.8
      - 8.8.4.4
    stdin_open: true
    tty: true
    # ** NOTE: Run this uwsgi command below to run a uwsgi server instead of http server,
    # ** matching deployed configurations. You must also edit nginx.conf. Be aware there
    # ** is no autoreload for local development with this enabled.
    # command: uwsgi --ini /srv/www/portal/server/conf/uwsgi/uwsgi_core.ini
    command: python manage.py runserver --noasgi 0.0.0.0:6000
    container_name: core_portal_django
    networks:
      - sciviscolor_net

  workers:
    image: ${PORTAL_IMAGE}:${PORTAL_TAG}
    volumes:
      - ./conf/portal/settings_secret.py:/srv/www/portal/server/portal/settings/settings_secret.py
      - ./conf/portal/settings_custom.py:/srv/www/portal/server/portal/settings/settings_custom.py
      - /var/www/portal/portal/media:/srv/www/portal/server/media
      - /var/www/portal/portal/static:/srv/www/portal/server/static
    dns:
      - 8.8.8.8
      - 8.8.4.4
    command: "celery -A portal worker -Q default,indexing,files,api,onboard --concurrency=2"
    container_name: core_portal_workers
    networks:
      - sciviscolor_net

  colormoves:
     # Uncomment this line to use an image defined in .env file. (1/4)
    image: ${COLORMOVES_APP_IMAGE}:${COLORMOVES_APP_TAG}
    # Comment out the build block if using an image. (2/4)
    # build:
    #   context: .
    #   dockerfile: ./Dockerfile
    # Comment out the volume block if using an image. (3/4)
    # volumes:
    #   - .:/colormoves
    ports:
      - 8888:8888
    environment:
      - USE_DEV_CLIENT=false   # Set to false if using an image. (4/4)
    stdin_open: true
    tty: true
    command: ['--report-compact']
    container_name: colormoves
    hostname: colormoves
    restart: always
    networks:
      - sciviscolor_net


volumes:
  core_portal_redis_data:
  core_portal_rabbitmq_data:
  core_portal_es_data:
  core_portal_postgres_data:
  core_cms_postgres_data:
  # colormoves_app_distribution:


networks:
  sciviscolor_net:
